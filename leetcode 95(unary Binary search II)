Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.

 

Example 1:


Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]

*****************************************solution********************************************
class Solution {
public:
    vector<TreeNode*> solve(int start, int end){
        if(start>end)
            return {NULL};
        
        vector<TreeNode*>ans;
        for(int i=start;i<=end;i++){
            vector<TreeNode*>leftBound=solve(start,i-1);
            vector<TreeNode*>rightBound=solve(i+1,end);
            for(auto l: leftBound){
                for(auto r:rightBound){
                    TreeNode *root=new TreeNode(i);
                    root->left=l;
                    root->right=r;
                    ans.push_back(root);
                }
            }
        }
        return ans;
        
    }
    vector<TreeNode*> generateTrees(int n) {
        return solve(1,n);
    }
};
