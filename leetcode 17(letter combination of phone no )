Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
**********************solution(recursive approach)*********************************

class Solution {
    void solve(string digits, vector<string> &ans, string temp, int index, string map[]){
        // Base case
        if(index >= digits.size()){
            ans.push_back(temp);
            return;
        }
        
        // Fetch the number from the digits string and 
        // then fetch the combination of characters mapped to that number from map[]
        int number = digits[index] - '0';
        string characters = map[number];
        
        for(int i=0;i<characters.size();i++){
            temp.push_back(characters[i]);
            solve(digits, ans, temp, index+1, map);
            temp.pop_back();
        }
    }
public:
    vector<string> letterCombinations(string digits) {
        vector<string> ans;
        if(digits.length() == 0) return ans;
        
        string temp = "";
        
        string map[10] = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
        
        solve(digits, ans, temp, 0, map);
        return ans;
    }
};


