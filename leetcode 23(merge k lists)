You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6


********************************************************************solution*************************************************************************************

class Solution {
public:
    ListNode *merge(ListNode *l1, ListNode *l2){
        if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
        if(l1->val<=l2->val){
            l1->next=merge(l1->next,l2);
            return l1;
        }
        else{
            l2->next=merge(l1,l2->next);
            return l2;
        }
    }
    ListNode *split(int start,int end,vector<ListNode*>& lists){
        if(start==end)
            return lists[start];
        int mid=(start+end)/2;
        ListNode *l1=split(start,mid,lists);
        ListNode *l2=split(mid+1,end,lists);
        return merge(l1,l2);
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0)
            return NULL;
        return split(0,lists.size()-1,lists);
    }
};

