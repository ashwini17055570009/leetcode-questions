You are given an array target of n integers. From a starting array arr consisting of n 1's, you may perform the following procedure :

let x be the sum of all elements currently in your array.
choose index i, such that 0 <= i < n and set the value of arr at index i to x.
You may repeat this procedure as many times as needed.
Return true if it is possible to construct the target array from arr, otherwise, return false.

 

Example 1:

Input: target = [9,3,5]
Output: true
Explanation: Start with arr = [1, 1, 1] 
[1, 1, 1], sum = 3 choose index 1
[1, 3, 1], sum = 5 choose index 2
[1, 3, 5], sum = 9 choose index 0
[9, 3, 5] Done

****************************************************solution**********************************************

class Solution {
public:
    bool isPossible(vector<int>& target) {
        long sum=0;
        priority_queue<int>pq;
        for(int i=0;i<target.size();i++){
            pq.push(target[i]);
            sum+=target[i];
        }
        
        while(pq.top()!=1){
            sum=sum-pq.top();
            if(sum==1)
                return true;
            if(sum>=pq.top() || sum==0)
                return false;
            int mod=pq.top()%sum;
            if(mod==0)
                return false;
            sum+=mod;
            pq.pop();
            pq.push(mod);
        }
        return true;
    }
};
