You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

**********************************************solutiion************************************************
class Solution {
public:

    void dfs(TreeNode *root, vector<vector<int>> &res, int level){

        if(!root) return;

        if(res.size() == level) res.push_back({});

        res[level].push_back(root->val);
        dfs(root->left,res,level+1);
        dfs(root->right,res,level+1);

    }

    vector<vector<int>> levelOrder(TreeNode* root) {

        vector<vector<int>> res;

        if(!root) return res;

        dfs(root,res,0);

        return res;

    }
};
